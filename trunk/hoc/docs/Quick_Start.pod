=head1 Quick Start

=head2 A Simple Commandline Tool

Apple provides the source code for a "Simple Cocoa Command-Line
Tool", which performs uniquing and sorting on a list of
arguments.  You can find the original code at:
L<http://developer.apple.com/documentation/Cocoa/Conceptual/CocoaObjects/Articles/SimpleCocoaTool.html>

To give you an idea of what HOC code looks like, here's
a line-by-line translation of the Objective-C code that's as
close to the original as we can get (even trying to do silly
things like emulate a C<while()> loop):

  module Main where

  import List (genericLength)

  -- #import <Foundation/Foundation.h>
  import Foundation
  import Foundation.NSProcessInfo (arguments)
         -- We need this import to disambiguate the 'arguments'
         -- function: an arguments method is defined in many
         -- classes, including NSProcessInfo, NSScriptCommand,
         -- and NSTask.  Any ambigious functions are not exported
         -- by the framework by default: you will need to
         -- import those functions explicitly.
  import HOC
  import HOC.Base (newAutoreleasePool, releaseObject)
  import HOC.ID (isNil)

  -- int main (int argc, const char * argv[]) {
  main = do
  --   NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
  --   ...
  --   [pool release];
       withAutoreleasePool main'

  main' = do
  --   NSArray *args = [[[NSProcessInfo processInfo] arguments];
       args <- _NSProcessInfo # processInfo >>= arguments
  --   NSCountedSet *cset = [[NSCountedSet alloc] initWithArray:args];
       cset <- _NSCountedSet # alloc >>= initWithArray args
  --   NSArray *sorted_args = [[cset allObjects]
  --     sortedArrayUsingSelector:@selector(compare:)];
       sorted_args <- cset # allObjects
	 >>= sortedArrayUsingSelector (getSelectorForName "compare:")
  --   NSEnumerator *enm = [sorted_args objectEnumerator];
       enm <- sorted_args # objectEnumerator
  --   id word;
  --   while (word = [enm nextObject]) {
  --     printf("%s\n", [word UTF8String]);
  --   }
       let loop = do
	   word <- enm # nextObject
	   if (not (isNil word))
	     then do { putStrLn ( (fromNSString.castObject) word ); loop }
	     else do return ()
	   in
	       loop
  --   [cset release];
       -- Don't need to release anything: HOC manages memory for you via
       -- Haskell's garbage collector!
  --   return 0;
       return ()
  -- }

The code is available in the F<Samples/UniqSort/> directory of
the HOC source distribution if you'd like to compile it and try
it for yourself:

  ~hoc/Samples/UniqSort % ./uniqsort a z c a l q m z
  /Users/... # This appears because it's part of the program's
             # argument list!
  a
  c
  l
  m
  q
  z

Hopefully, the code listing above will give you a good idea about
how to write Haskell code that sends messages to Objective-C
objects.

=head2 Sending Messages

=over

=item * Basic Message Sending

The Objective-C syntax C<[receiver method:arg1 with:arg2]> used
to send a message to a receiving object is translated to Haskell
as C<methodWith arg1 arg2 receiver>.

The receiving object goes I<last> in the parameter last, because
then you can use ye olde trick of defining an infix function "C<x
# f = f x>" to produce the more object-oriented-looking code
C<receiver # methodWith arg1 arg2>.  (The C<#> infix function is
defined for you by HOC already, so you don't need to define it
yourself).

Note that sending messages is an IO operation, so you'll need to
be in the IO monad to use it.  Purely functional (non-mutable)
objects such as an C<NSArray> or a C<NSString> provide their own
specialised non-IO functions, which can be used outside of
monadic code.  See their documentation (or source code
implementation) for details.

=item * Message Chaining

I<Message chaining> is a very common phenomenon in Objective-C:
syntactically, it looks like C<< [[NSCountedSet alloc]
initWithArray:args] >>.  You first send an C<alloc> message to
the C<NSCountedSet> (class) object, and then send
C<initWithArray:args> to the result of that.

Experienced Haskell programmers will realise that this is
analagous to the I<monadic bind> operator, C<E<gt>E<gt>=>, so the
above message chain could be written as C<<< _NSCountedSet
# alloc >>= initWithArray args >>>.

=back

=head2 Types for the Objective-C Class Hierarchy

An Objective-C class C<foo> has a corresponding Haskell type
C<foo ()>: the type signature for a function which takes in an
I<NSArray> (and I<only> an I<NSArray>) and outputs an I<NSMovie>
will look like C<< NSArray () -> NSMovie () >>.

To permit a function to use a I<NSArray> or any of its subclasses
such as I<NSMutableArray> (which is the behaviour you'd expect
from an object-oriented language), use a type variable in place
of the C<()>: e.g. I<NSArray a>.

=head2 Class Objects

Class objects are represented in HOC by preprending an underscore
to the class name: I<_classname>.  For example, to send the
C<alloc> message to the I<NSMovie> class object, write
C<_NSMovie # alloc>.

=head2 I<NSString> vs. I<String>

HOC provides the two functions C<< toNSString :: String -> NSString
() >>, and C<< fromNSString :: NSString () -> String >>, to
convert to and from Haskell strings and the Foundation
framework's C<NSString> objects.

Note that C<fromNSString> is a pure function, and that it will not
accept a subclass of C<NSString> as an argument, because subclasses
may be mutable. Make sure you never pass a casted C<NSMutableString>
to fromNSString.

If you want to work with (potentially) mutable string objects, you
need to use the functions C<< haskellString :: NSString a -> IO String >> and
C<< stringWithHaskellString :: String -> NSStringClass a -> IO (NSString a) >>.
Use them as if they were Objective-C methods in the NSString class.

=head2 Generalised Marshaling

The C<HOC.Marshal> module provides a function C<< marshal :: a ->
b >>, which can be used to try to marshal (convert) any type to
any other type.  Be careful with the C<marshal> function: since
its output type is ambiguous (it's a type variable), Haskell's
type inference engine greatly relies on context to figure out
what the output type should really be.  You may have to I<fix>
the output type explicitly by appending the C<:: t> syntax to
expression.  For example, C<marshal "Foo"> own its own may
generate an error, but C<marshal "Foo" :: NSString ()> may not.

You can also define marshalling for your own data types, by
making them part of C<HOC.Marshal>'s C<ObjCMarshal> type class:

  import HOC.Marshal

  instance ObjCMarshal FiniteMap ( NSDictionary () ) where
    marshal fm = -- conversion code here

=head2 Selectors

Use the C<< getSelectorForName :: String -> SEL >> function to
generate a Haskell C<SEL> datatype from a raw Haskell string.  As
you can guess, the Haskell C<SEL> type is the same as
Objective-C's C<SEL> type: it represents a selector (method
name).

Note that the string passed to C<getSelectorForName> is the
I<Objective-C> selector name (with all the colons in the
appropriate places), not the translated Haskell function name.
For example, you should pass in C<"initWithURL:byReference:">,
and not C<"initWithURLByReference">.

=head2 Autorelease Pools

Use the function C<withAutoreleasePool :: IO a> to create an
autorelease pool and run an IO action which which use the pool:

  main = do
    withAutoreleasePool main'
  
  main' = do
    args <- _NSProcessInfo # processInfo >>= arguments
    ...

Using C<withAutoreleasePool> instead of an explict C<alloc> and
C<release> for the pool saves you from remembering to
release it: after your action has been run, the pool is
automatically released.

=for comment XXX: link to autorelease pool section

=for comment Modeline for vi(m)
vi:sw=2 tw=65

