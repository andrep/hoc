=head1 Mapping Objective-C Concepts to Haskell

=head2 Objects & Classes

=head3 Classes

An Objective-C class C<foo> has a corresponding Haskell type
C<foo ()>: the type signature for a function which takes in an
I<NSArray> (and I<only> an I<NSArray>) and outputs an I<NSMovie>
will look like C<< NSArray () -> NSMovie () >>.

To permit a function to use a I<NSArray> or any of its subclasses
such as I<NSMutableArray> (which is the behaviour you'd expect
from an object-oriented language), use a type variable in place
of the C<()>: e.g. I<NSArray a>.

=head3 Class Objects

Class objects are represented in HOC by preprending an underscore
to the class name: I<_classname>.  For example, to send the
C<alloc> message to the I<NSMovie> class object, write
C<_NSMovie # alloc>.

=head3 Protocols & Protocol Adoptions

=for comment XXX: fix up this section

This section of the documentation hasn't been written yet, but in
the meantime, you may find the following note from Wolfgang
Thaller useful:

  Yes, formal protocols. Luckily, they're very rarely used in
  Cocoa.  It's only an ifgen issue; the current ifgen just
  generates ID for all id<Foo> types.  For id<Foo,Bar> used as
  a parameter, it should generate (Foo (ID a), Bar (ID a)) => ID
  a.  For return values id<Foo,Bar>, we'll have to define
  a special type ID_Bar_Foo and declare instances for Foo and Bar
  for it. The only difficult part should be to avoid defining
  those types too often...

=head3 Categories

This section is not written yet: please write to the I<hoc-users>
mailing list (see L<http://hoc.sourceforge.net/support.html>) for
assistance or, have a look at the HOC source code yourself.

=head3 Specific Classes

=head4 I<NSString> vs. I<String>

HOC provides the two functions C<< toNSString :: String -> NSString
() >>, and C<< fromNSString :: NSString () -> String >>, to
convert to and from Haskell strings and the Foundation
framework's C<NSString> objects.

Note that C<fromNSString> is a pure function, and that it will not
accept a subclass of C<NSString> as an argument, because subclasses
may be mutable. Make sure you never pass a casted I<NSMutableString>
to C<fromNSString>.

If you want to work with (potentially) mutable string objects,
you can use the functions C<< haskellString :: NSString a -> IO
String >> and C<< stringWithHaskellString :: String ->
NSStringClass a -> IO (NSString a) >>.  Use them as if they were
Objective-C methods in the I<NSString> class.

=head2 Object Messaging

=head3 Sending Messages to Objects

The Objective-C syntax C<[receiver method:arg1 with:arg2]> that
is used to send a message to a receiving object, is translated to
Haskell as C<methodWith arg1 arg2 receiver>.

The receiving object goes I<last> in the parameter last, because
then you can use ye olde trick of defining an infix function "C<x
# f = f x>" to produce the more object-oriented-looking code
C<receiver # methodWith arg1 arg2>.  (The C<#> infix function is
defined for you by HOC already, so you don't need to define it
yourself).

Note that sending messages is an IO operation, so you'll need to
be in the IO monad to use it.  Purely functional (non-mutable)
objects such as an C<NSArray> or a C<NSString> provide their own
specialised non-IO functions, which can be used outside of
monadic code.  See their documentation (or source code
implementation) for details.

=head3 Message Chaining

I<Message chaining> is a very common phenomenon in Objective-C:
syntactically, it looks like C<< [[NSCountedSet alloc]
initWithArray:args] >>.  You first send an C<alloc> message to
the C<NSCountedSet> (class) object, and then send
C<initWithArray:args> to the result of that.

Experienced Haskell programmers will realise that this is
analagous to the I<monadic bind> operator, C<E<gt>E<gt>=>, so the
above message chain could be written as C<<< _NSCountedSet
# alloc >>= initWithArray args >>>.

=head3 Ambiguous Function Names

Some functions have the same name and are defined in more than
one class: e.g. the I<NSProcessInfo>, I<NSScriptCommand> and
I<NSTask> classes all define a method named C<arguments>.  Any
such multiply-occuring method names are not exported from the
top-level framework module (I<Foundation> or I<AppKit>) by
default: you will need to import the class specifically, e.g.
C<import Foundation.NSProcessInfo> to import I<NSProcessInfo>'s
C<arguments> function.

If you wish to use the C<arguments> method from multiple classes,
use the C<import qualified> or C<import X as Y> constructs, just
as if you were importing a same-named function from different
Haskell modules normally.

=head3 Selectors

An Objective-C selector name is translated to a Haskell function
name as follows:

=over 4

=item Colons (C<:>) disappear

e.g. The Objective-C method name "C<mouseDragged:>" is translated to
"C<mouseDragged>".

=item Initial lower-case characters after a colon (C<:>) become upper-case

e.g. The Objective-C method name "C<initWithURL:byReference:>" is
translated to "C<initWithURLByReference>".

=item Leading upper-case characters become lower-case

e.g. The Objective-C method name
"C<TIFFRepresentationUsingCompression:factor:>" is translated to
"C<tiffrepresentationUsingCompressionFactor>".

=back

Use the C<< getSelectorForName :: String -> SEL >> function to
generate a Haskell C<SEL> datatype from a raw Haskell string.  As
you can guess, the Haskell C<SEL> type is the same as
Objective-C's C<SEL> type: it represents a selector (method
name).

Note that the string you pass to C<getSelectorForName> is the
I<Objective-C> selector name (with all the colons in the
appropriate places), not the translated Haskell function name.
For example, you should pass in C<"initWithURL:byReference:">,
and not C<"initWithURLByReference">.

=begin comment

=for comment =head3 Generalised Marshaling

The C<HOC.Marshal> module provides a function C<< marshal :: a ->
b >>, which can be used to try to marshal (convert) any type to
any other type.  Be careful with the C<marshal> function: since
its output type is ambiguous (it's a type variable), Haskell's
type inference engine greatly relies on context to figure out
what the output type should really be.  You may have to I<fix>
the output type explicitly by appending the C<:: t> syntax to
expression.  For example, C<marshal "Foo"> on its own may
generate an error, but C<marshal "Foo" :: NSString ()> may not.

You can also define marshalling for your own data types, by
making them part of C<HOC.Marshal>'s C<ObjCMarshal> type class:

  import HOC.Marshal

  instance ObjCMarshal FiniteMap ( NSDictionary () ) where
    marshal fm = -- conversion code from FiniteMap to NSDictionary
  instance ObjCMarshal ( NSDictionary () ) FiniteMap where
    marshal dict = -- conversion code from NSDictionary to FiniteMap

=end comment

=head3 Foundation & AppKit Frameworks

The Haskell interfaces for the Foundation and AppKit frameworks
(nE<eacute>e Cocoa) are automatically built when you build and
install HOC.  To use them, simply write C<import Foundation>,
C<import AppKit> or C<import Cocoa> at the top of your Haskell
module to import the entire framework's class hierarchy and
method definitions into scope.  (But, see the section on
L<"Ambiguous Function Names"> to see why some methods are I<not>
imported.)

To use your own, custom frameworks with HOC, see the chapter on
L<"Accessing Other Frameworks from Haskell">.

=head2 Miscellanea

=head3 Autorelease Pools

Use the function C<withAutoreleasePool :: IO a> to create an
autorelease pool and run an IO action which which use the pool:

  main = do
    withAutoreleasePool main'
  
  main' = do
    args <- _NSProcessInfo # processInfo >>= arguments
    ...

Using C<withAutoreleasePool> instead of an explict C<alloc> and
C<release> for the pool saves you from remembering to
release it: after your action has been run, the pool is
automatically released.

=head3 C<enum> Types

C enum types are marshalled, but with a couple of twists.  If the
enum is I<named>, a data declaration is created that is the same
name as the enum, with each of its constructors corresponding to
one of the enum definitions.  A value ("constant function") will
also be created for each enum definition, with the first letter
and the initial "NS" lowercased, if that's present.  The Haskell
data type will belong to the C<Eq>, C<Ord>, C<Read>, C<Show>, and
and C<HOC.CEnum> type classes.  If you need to use the literal
integer value of the enum, use the C<HOC.fromCEnum> and
C<HOC.toCEnum> functions.

Since that's all a bit abstract, an example will hopefully make
things much clearer!  The following C enum declaration:

  typedef enum _MyEnum {
    Foo = 0,
    Bar = 42,
    NSBaz,
    NSQuux = 69
  } MyEnum;

will be marshalled to the following Haskell declarations:

  data MyEnum = Foo | Bar | NSBaz | NSQuux
    deriving (Eq, Ord, Read, Show)

  instance CEnum MyEnum where
    fromCEnum Foo = 0
    fromCEnum Bar = 42
    fromCEnum NSBaz = 43
    fromCEnum NSQuux = 69
    toCEnum 0 = Foo
    toCEnum 42 = Bar
    toCEnum 43 = NSBaz
    toCEnum 69 = NSQuux

  foo = Foo
  bar = Bar
  nsbaz = NSBaz
  nsquux = NSQuux

On the other hand, I<anonymous enums> are marshalled to simple
values only.  The following example anonymous C enum:

  enum { NSFoo = 1, Bar = 3 }

will be marshalled to:

  nsfoo = 1
  bar = 3

=head3 C<struct> Types

This section is not written yet: please write to the I<hoc-users>
mailing list (see L<http://hoc.sourceforge.net/support.html>) for
assistance or, have a look at the HOC source code yourself.

=for comment Modeline for vi(m)
vi:sw=2 tw=65

