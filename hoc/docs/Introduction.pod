=head1 Introduction

HOC is a B<H>askell to B<O>bjective-B<C> binding.  In a nutshell,
it enables you to use Objective-C objects and frameworks from
Haskell, and also enables you to write Objective-C objects in
Haskell.  The Haskell interfaces produced by HOC are:

=over

=item * Strongly Typed

While Objective-C is a typed language, it is weakly typed (since
it is based on C, which is also weakly typed language), and
dynamically typed.  Haskell is a statically, strongly typed
language, and HOC uses this to its advantage: the Haskell
interfaces generated by HOC are heavily typed, and map closely to
Objective-C's concepts.

For example, to allocate a new object, you can send the C<alloc>
message to an Objective-C object.  More specifically, you are
required to send C<alloc> to a I<class object>: C<[NSMovie
alloc]>, in Objective-C syntax.  In HOC, sending C<alloc> to
a non-class object is a compile-time error, because C<alloc> is
not defined for non-class objects.  Of course, since Objective-C
uses dynamic binding, HOC still enables you to send arbitrary
messages to any object via a generic C<sendMsg> function, but the
normal way to send messages to objects with HOC are all strongly
typed.

In practical terms, this means that you gain all the benefits of
a modern type system: Haskell's I<type inference> is applied to
everything from message sending operations to maintaining an
object-oriented class hieararchy.  As a result, you produce
programs that are safer and work correctly on the first succesful
compilation a disturbingly large percentage of the time.

=item * Automatically Generated

HOC uses an I<interface generator> that parses Objective-C header
files to produce Haskell source code.  The Haskell code contains
data types representing the Objective-C class hierarchy, and
methods and selectors which enable HOC to communicate with
Objective-C frameworks.  If you are familiar with other Haskell
interface generators such as F<c2hs> or F<GreenCard>, HOC's
I<ifgen> tool does the same job, but for creating bindings to
Objective-C classes instead.

By default, HOC is configured to build bindings for the
F<Foundation> and F<AppKit> frameworks (collectively named
F<Cocoa> on S<Mac OS X>), but you can build your own bindings
with F<ifgen> if required.

=for comment XXX insert hyperlink to c2hs etc

=item * Haskell-Friendly

HOC was designed from the very beginning to be as 'Haskell-like'
as possible: after all, you are writing Haskell code, not
Objective-C code!  We make heavy use of key Haskell features such
as type classes and partial evaluation, to ensure that you don't
have to do evil things like method name mangling or understand
a whole new bunch of syntax, just to do something simple like
embed an I<NSMovie> in your application.

=back

HOC's primary platform is S<Mac OS X>, Apple's modern UNIX-based
operating system.  However, HOC does provides preliminary support
for the GNUstep platform, and has been lightly toasted, err,
tested, with GNUstep on Linux.

=for comment XXX insert link to GNUstep

=head2 Requirements

HOC requires the Glasgow Haskell Compiler (GHC) 6.2 or later to
build.  We use the latest features provided by GHC, such as
Template Haskell, to implement many parts of HOC, and it would be
impossible (as opposed to just plain hard) to port these
implementations to work with older versions of GHC.  If you're
not keeping up with GHC, you're not keeping up with the times!
:-)

=for comment XXX: insert link to GHC

=head2 Assumed Knowledge

Let's get something straight here: HOC isn't for the beginner
Haskell or Objective-C developer.  You are required to know basic
Objective-C concepts such as what classes, methods, messages and
selectors are, and ideally will have written a few Objective-C
programs to understand how to use all these concepts in practice.
You should also be comfortable with programming in Haskell, in
particular how to program with IO in Haskell (meaning that you
should have actually I<written> a few Haskell tools which use
IO).  That doesn't mean you have to understand monads, by the
way.  Hell, this author has done IO in Haskell for years and
doesn't pretend to understand monads ...

=head2 Getting Started

TODO: Building HOC.

TODO: A small (hello object world) example.

=for comment Modeline for vi(m)
vi:sw=2 tw=65

