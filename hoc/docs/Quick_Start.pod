=head1 Quick Start

=head2 A Simple Commandline Tool

Apple provides the source code for a "Simple Cocoa Command-Line
Tool", which performs uniquing and sorting on a list of
arguments.  You can find the original code at:
L<http://developer.apple.com/documentation/Cocoa/Conceptual/CocoaObjects/Articles/SimpleCocoaTool.html>

To give you an idea of what HOC code looks like, here's
a line-by-line translation of the Objective-C code that's as
close to the original as we can get (even trying to do silly
things like emulate a C<while()> loop):

  module Main where

  -- #import <Foundation/Foundation.h>
  import Foundation
  import Foundation.NSProcessInfo (arguments)
         -- We need this import to disambiguate the 'arguments'
         -- function: an 'arguments' method is defined in many
         -- classes, including NSProcessInfo, NSScriptCommand,
         -- and NSTask.  Any ambiguous functions are not exported
         -- by the framework by default: you will need to
         -- import those functions explicitly.
  import HOC

  -- int main (int argc, const char * argv[]) {
  main = do
  --   NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
  --   ...
  --   [pool release];
       withAutoreleasePool main'

  main' = do
  --   NSArray *args = [[[NSProcessInfo processInfo] arguments];
       args <- _NSProcessInfo # processInfo >>= arguments
  --   NSCountedSet *cset = [[NSCountedSet alloc] initWithArray:args];
       cset <- _NSCountedSet # alloc >>= initWithArray args
  --   NSArray *sorted_args = [[cset allObjects]
  --     sortedArrayUsingSelector:@selector(compare:)];
       sorted_args <- cset # allObjects
	 >>= sortedArrayUsingSelector (getSelectorForName "compare:")
  --   NSEnumerator *enm = [sorted_args objectEnumerator];
       enm <- sorted_args # objectEnumerator
  --   id word;
  --   while (word = [enm nextObject]) {
  --     printf("%s\n", [word UTF8String]);
  --   }
       let loop = do
	   word <- enm # nextObject
	   if (not (isNil word))
	     then do { putStrLn ( (fromNSString.castObject) word ); loop }
	     else do return ()
	   in
	       loop
  --   [cset release];
       -- Don't need to release anything: HOC manages memory for you via
       -- Haskell's garbage collector!
  --   return 0;
       return ()
  -- }

The code is available in the F<Samples/UniqSort/> directory of
the HOC source distribution if you'd like to compile it and try
it for yourself:

  ~hoc/Samples/UniqSort % ./uniqsort a z c a l q m z
  /Users/... # This appears because it's part of the program's
             # argument list!
  a
  c
  l
  m
  q
  z

Hopefully, the code listing above will give you a good idea about
how to write Haskell code that sends messages to Objective-C
objects.  For more detail, see Chapter 3.

=for comment XXX: link to chapter 3

=head2 A Simple GUI Application

=for comment Modeline for vi(m)
vi:sw=2 tw=65

